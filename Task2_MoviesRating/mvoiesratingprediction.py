# -*- coding: utf-8 -*-
"""MvoiesRatingPrediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wH3OvDpsGwRWcK7QTgwB4Gm72wcjNP-F

**Import** **Libraries**
"""

#importing all libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

#importing warning
import warnings
warnings.filterwarnings('ignore')

"""Import dataset"""

dataset = pd.read_csv('/content/IMDb Movies India.csv',encoding = 'ISO-8859-1')

dataset

dataset.info()

dataset.describe()

"""**Data Filtering and PreProcessing**"""

attribute = dataset.columns
print(attribute)

shape = dataset.shape
print(f"Rows : {shape[0]},Columns : {shape[1]}")

all_unique_genres = dataset['Genre'].unique()
print("Unique Genres : ",all_unique_genres)

rating_distribution = dataset['Rating'].value_counts()
print(rating_distribution)

"""Remove duplicates"""

dataset.drop_duplicates(inplace=True)

attributes = ['Name', 'Year', 'Duration', 'Votes', 'Rating']
dataset.dropna(subset = attributes, inplace=True)
missing_value = dataset.isna().sum()
print(missing_value)

dataset

movie_name_rating = dataset[['Name','Rating']]
print(movie_name_rating.head())

top_rated_movies = dataset.sort_values(by = 'Rating', ascending = False).head(10)
plt.figure(figsize = (10,6))
plt.barh(top_rated_movies['Name'], top_rated_movies['Rating'], color='green')
plt.xlabel('Rating')
plt.ylabel('Movie')
plt.title('Top 10 Highest-Rated Movies')
plt.gca().invert_yaxis()
plt.show()

dataset['Votes'] = pd.to_numeric(dataset['Votes'],errors = 'coerce')
plt.figure(figsize=(10,6))
plt.scatter(dataset['Rating'],dataset['Votes'],alpha=0.5,color='g')
plt.xlabel('Rating')
plt.ylabel('Votes')
plt.title('Scatter Plot of Rating Vs Votes')
plt.grid(True)
plt.show()

actors = pd.concat([dataset['Actor 1'], dataset['Actor 2'], dataset['Actor 3']])
actor_count = actors.value_counts().reset_index()
actor_count.columns = ['Actor','Number of Movies']
sns.barplot(x='Number of Movies', y='Actor', data = actor_count.head(10), palette='viridis')
plt.xlabel('Number of Movies')
plt.ylabel('Actor')
plt.title('Top 10 Actors by Number of Movies Performed')
plt.show()

columns_of_interest = ['Votes','Rating','Duration','Year']
sns.set(style = 'ticks')
sns.pairplot(dataset[columns_of_interest], diag_kind='kde', markers='o',palette='viridis',height=3.0, aspect=1.5)
plt.suptitle('Pair Plot of Voting, Rating, Duration and Year', y=1.02)
plt.show()

numerical_columns = ['Votes', 'Rating', 'Duration', 'Year']
correlation_matrix = dataset[numerical_columns].corr()
plt.figure(figsize=(8,6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', vmin=-1, vmax=1)
plt.title('Correlation Heatmap')
plt.show()

"""Feature Engineering"""

dataset_sorted = dataset.sort_values(by = 'Votes', ascending=False)
dataset_sorted['Vote_Count_Percentile']=dataset_sorted['Votes'].rank(pct=True)*100
dataset_sorted.reset_index(drop=True, inplace=True)
print(dataset_sorted[['Name','Votes','Vote_Count_Percentile']])

dataset.head()

dataset=dataset.dropna(subset=['Votes'])
dataset.head()

"""**Model Training and Testing**"""

dataset['Year'] = dataset['Year'].astype(str)
dataset['Duration'] = dataset['Duration'].astype(str)
dataset['Year'] = dataset['Year'].str.extract('(\d+)').astype(float)
dataset['Duration'] = dataset['Duration'].str.extract('(\d+)').astype(float)
x=dataset[['Year','Duration','Votes']]
y=dataset['Rating']
x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(x_train, y_train)

y_pred = model.predict(x_test)

mae = mean_absolute_error(y_test, y_pred)
rmse = mean_squared_error(y_test, y_pred, squared=False)
r2=r2_score(y_test, y_pred)
print(f"Mean Absolute Error : {mae}")
print(f"Root Mean Squared Error : {rmse}")
print(f"R-Squared (R2) Score : {r2}")

"""**Visualizaition**"""

y_test = np.random.rand(100)*10
y_pred = np.random.rand(100)*10
errors = y_test - y_pred
fig, axs = plt.subplots(3,1,figsize=(8,13))

#Scatter Plot
axs[0].scatter(y_test, y_pred)
axs[0].set_xlabel("Actual Ratings")
axs[0].set_ylabel("Predcited Ratings")
axs[0].set_title("Actual Vs Predicted Rating")

#Line Plot
movie_samples = np.arange(1, len(y_pred)+1)
axs[1].plot(movie_samples, y_pred, marker='o', linestyle='-')
axs[1].set_xlabel("Movie Samples")
axs[1].set_ylabel("Predcited Ratings")
axs[1].set_title("Predicted Rating Across Movie Samples")
axs[1].tick_params(axis='x', rotation=45)

#Histogram
axs[2].hist(errors, bins=30)
axs[2].set_xlabel("Prediction Errors")
axs[2].set_ylabel("Frequency")
axs[2].set_title("Distribution of Prediction Errors")
axs[2].axvline(x=0, color='r', linestyle='--')
plt.tight_layout()
plt.show()